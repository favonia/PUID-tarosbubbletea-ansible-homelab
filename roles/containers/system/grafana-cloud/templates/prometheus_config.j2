global:
  #scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  scrape_interval: 7s
  scrape_timeout: 7s
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

  # Attach these labels to any time series or alerts when communicating with
  # external systems (federation, remote storage, Alertmanager).
  external_labels:
    monitor: "codelab-monitor"


# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first.rules"
  # - "second.rules"


# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
    # self
  - job_name: prometheus
    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.
    static_configs:
      - targets: ["prometheus:9090"]

  - job_name: telegraf
    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.
    static_configs:
      - targets: ["telegraf:9273"]
  
  - job_name: cloudflare
    static_configs:
      - targets: ["cloudflare-exporter:8080"]

remote_write:
  - url: "{{prometheus_remote_write_url}}"
    basic_auth:
      username: "{{prometheus_remote_write_user}}"
      password: "{{prometheus_remote_write_key}}"

  {# write_relabel_configs:
    # drop specific metrics from remote-write
  - source_labels: ['__name__']
    regex: 'go_gc_.*'
    action: 'drop' #}


      {# # keep only specific labels for the kept metrics
    - regex: '__name__|instance|job|version|branch'
      action: 'labelkeep'

    - action: 'replace'
      target_label: 'source'
      replacement: 'writer-prometheus'

    - source_labels:
      - '__name__'
      - 'source'
      separator: ;
      regex: '(up);(writer-prometheus)'
      target_label: 'job'
      action: 'replace'
      replacement: '${2}-baz' #}